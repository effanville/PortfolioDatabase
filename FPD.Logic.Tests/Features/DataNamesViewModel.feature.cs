// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Effanville.FPD.Logic.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DataNamesViewModel")]
    public partial class DataNamesViewModelFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "DataNamesViewModel.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "DataNamesViewModel", "A view model of DataNames should behave in a certain way.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("001 Can load and view empty data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _001CanLoadAndViewEmptyData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("001 Can load and view empty data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and no data", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
        testRunner.And("the user can see the number of names is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("002 Can load and view data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _002CanLoadAndViewData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("002 Can load and view data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table1.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 21
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table1, "Given ");
#line hidden
#line 24
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
        testRunner.And("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("003 Can load and update data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _003CanLoadAndUpdateData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("003 Can load and update data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and no data", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
        testRunner.And("the user can see the number of names is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table2.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 44
        testRunner.When("new names are added to the database", ((string)(null)), table2, "When ");
#line hidden
#line 47
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
        testRunner.And("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
        testRunner.And(string.Format("the dataNames portfolio has only 1 of type {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("004 Can load and open data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _004CanLoadAndOpenData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("004 Can load and open data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table3.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 63
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table3, "Given ");
#line hidden
#line 66
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
        testRunner.And("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table4.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 70
        testRunner.When("I select the names row with data", ((string)(null)), table4, "When ");
#line hidden
#line 73
        testRunner.And("I click on the open data button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
        testRunner.Then("the action to open the tab is called.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("005 Can create new data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _005CanCreateNewData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("005 Can create new data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table5.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "HKD",
                            "http://www.google.com",
                            "UK,US"});
#line 86
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table5, "Given ");
#line hidden
#line 89
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
        testRunner.And("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table6.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Fidelity",
                            "Current",
                            "USD",
                            "",
                            "US"});
#line 93
        testRunner.When("I add a name with data", ((string)(null)), table6, "When ");
#line hidden
#line 96
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
        testRunner.Then("the user can see the number of names is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table7.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "HKD",
                            "http://www.google.com",
                            "UK,US"});
                table7.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Fidelity",
                            "Current",
                            "USD",
                            "",
                            "US"});
#line 98
        testRunner.And("the user can see the DataNames are", ((string)(null)), table7, "And ");
#line hidden
#line 102
        testRunner.And(string.Format("the dataNames portfolio has only 2 of type {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("006 Do not create matching new data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _006DoNotCreateMatchingNewData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("006 Do not create matching new data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table8.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 114
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table8, "Given ");
#line hidden
#line 117
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
        testRunner.And("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table9.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 121
        testRunner.When("I add a name with data", ((string)(null)), table9, "When ");
#line hidden
#line 124
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
        testRunner.Then("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
        testRunner.And(string.Format("the dataNames portfolio has only 1 of type {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("007 Can edit existing data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _007CanEditExistingData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("007 Can edit existing data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table10.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "GBP",
                            "",
                            ""});
#line 138
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table10, "Given ");
#line hidden
#line 141
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
        testRunner.And("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table11.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "History",
                            "HKD",
                            "www.google.com",
                            ""});
#line 145
        testRunner.When("I edit the 1 name data to", ((string)(null)), table11, "When ");
#line hidden
#line 148
        testRunner.Then("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table12.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "History",
                            "HKD",
                            "www.google.com",
                            ""});
#line 149
        testRunner.And("the user can see the DataNames are", ((string)(null)), table12, "And ");
#line hidden
#line 152
        testRunner.And(string.Format("the dataNames portfolio has only 1 of type {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("008 Can remove existing data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _008CanRemoveExistingData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("008 Can remove existing data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 163
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table13.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
                table13.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Fidelity",
                            "Current",
                            "",
                            "",
                            ""});
#line 164
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table13, "Given ");
#line hidden
#line 168
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
        testRunner.And("the user can see the number of names is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
        testRunner.When("I remove the 2 data name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
        testRunner.Then("the user can see the number of names is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table14.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 174
        testRunner.And("the user can see the DataNames are", ((string)(null)), table14, "And ");
#line hidden
#line 177
        testRunner.And(string.Format("the dataNames portfolio has only 1 of type {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("009: Can successfully download data")]
        [NUnit.Framework.TestCaseAttribute("Security", null)]
        [NUnit.Framework.TestCaseAttribute("BankAccount", null)]
        [NUnit.Framework.TestCaseAttribute("Currency", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark", null)]
        [NUnit.Framework.TestCaseAttribute("Asset", null)]
        [NUnit.Framework.TestCaseAttribute("Pension", null)]
        public void _009CanSuccessfullyDownloadData(string account, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("account", account);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("009: Can successfully download data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 188
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table15.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
                table15.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Fidelity",
                            "Current",
                            "",
                            "",
                            ""});
#line 189
        testRunner.Given(string.Format("I have a DataNamesViewModel with type {0} and data", account), ((string)(null)), table15, "Given ");
#line hidden
#line 193
        testRunner.And("the DataNamesViewModel is brought into focus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
        testRunner.Then(string.Format("I can see the DataNamesViewModel type is {0}", account), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
        testRunner.And("I can see the DNVW has header Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
        testRunner.And("the user can see the number of names is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account",
                            "Company",
                            "Name",
                            "Currency",
                            "Url",
                            "Sectors"});
                table16.AddRow(new string[] {
                            string.Format("{0}", account),
                            "Barclays",
                            "Current",
                            "",
                            "",
                            ""});
#line 197
        testRunner.When("I select the names row with data", ((string)(null)), table16, "When ");
#line hidden
#line 200
        testRunner.And("I download the data for the selected DataName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
        testRunner.Then("I can see that the data has been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
